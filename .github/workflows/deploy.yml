name: Deploy Frontend to S3 + CloudFront

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      ROOT_DIR: frontend/leavecalc
      DIST_DIR: frontend/leavecalc/dist # Vite 산출물 실제 경로

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: frontend/leavecalc/yarn.lock

      # yarn berry(3.x)이면 immutable, yarn 1.x이면 frozen-lockfile
     - name: Install deps (resilient)
  working-directory: ${{ env.ROOT_DIR }}   # = frontend/leavecalc
  env:
    # npm 레지스트리 명시 (yarn도 이 env를 존중)
    npm_config_registry: https://registry.npmjs.org
    # Yarn 1 전용 네트워크 타임아웃(ms). 아래 --network-timeout과 중복되면 CLI가 우선.
    YARN_NETWORK_TIMEOUT: 600000
  run: |
    set -e
    corepack enable || true

    # Yarn 버전에 따라 옵션 분기
    if yarn -v | grep -q '^1\.'; then
      CMD="yarn install --frozen-lockfile --network-timeout 600000 --mutex network"
    else
      CMD="yarn install --immutable"
    fi

    # 최대 5회 재시도 (지수 백오프)
    tries=5
    for i in $(seq 1 $tries); do
      echo "[$i/$tries] $CMD"
      if $CMD; then
        echo "Dependencies installed."
        break
      fi
      if [ "$i" -eq "$tries" ]; then
        echo "Install failed after $tries attempts."
        exit 1
      fi
      backoff=$(( i * 15 ))
      echo "Retrying in ${backoff}s..."
      sleep $backoff
    done
      - name: Build (Vite)
        working-directory: ${{ env.ROOT_DIR }}
        run: |
          yarn build
          test -d "./dist"

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-2

      # 해시 붙은 정적 자산(장기 캐시)
      - name: Sync assets (immutable)
        run: |
          aws s3 sync ./${{ env.DIST_DIR }} s3://${{ secrets.S3_BUCKET }} \
            --delete \
            --exclude "index.html" \
            --cache-control "public,max-age=31536000,immutable"

      # 앱 셸(index.html)은 항상 최신
      - name: Upload index.html (no-cache)
        run: |
          aws s3 cp ./${{ env.DIST_DIR }}/index.html s3://${{ secrets.S3_BUCKET }}/index.html \
            --cache-control "no-cache" \
            --content-type "text/html; charset=utf-8"

      # 보통 index.html만 무효화하면 충분
      - name: Invalidate CloudFront (index.html)
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CF_DISTRIBUTION_ID }} \
            --paths "/index.html"
